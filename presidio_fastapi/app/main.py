"""Main application module for the Presidio FastAPI service."""

import logging
from contextlib import asynccontextmanager
from typing import Any, AsyncGenerator

from fastapi import FastAPI
from fastapi.responses import JSONResponse

from presidio_fastapi.app.api.routes import router
from presidio_fastapi.app.config import settings
from presidio_fastapi.app.middleware import (
    MetricsMiddleware,
    RateLimiterMiddleware,
    SecurityHeadersMiddleware,
)
from presidio_fastapi.app.prometheus import setup_prometheus
from presidio_fastapi.app.services.analyzer import get_analyzer
from presidio_fastapi.app.telemetry import setup_telemetry

# Configure logging
logging.basicConfig(level=getattr(logging, settings.LOG_LEVEL.upper()))
logger = logging.getLogger(__name__)

# Global variable to store the custom OpenAPI schema
openapi_schema_cache: dict[str, Any] | None = None


@asynccontextmanager
async def lifespan(app: FastAPI) -> AsyncGenerator[None, None]:
    """Manages application lifespan events.

    Args:
        app: The FastAPI application instance.

    Yields:
        None
    """
    logger.info("Application startup")
    try:
        # Initialize analyzer
        logger.info("Initializing analyzer...")
        analyzer = get_analyzer()
        app.state.analyzer = analyzer
        logger.info("Analyzer initialization complete")
    except Exception as e:
        logger.error("Failed to initialize analyzer: %s", str(e))
        raise

    yield

    logger.info("Application shutdown")


def get_openapi_schema() -> dict[str, Any]:
    """Generates and caches a custom OpenAPI schema.

    Currently, this function is a placeholder and returns the cached schema
    or an empty dictionary if not cached. For actual customization, this
    function would need to modify the default OpenAPI schema generated by FastAPI.

    Returns:
        dict[str, Any]: The custom OpenAPI schema.
    """
    global openapi_schema_cache
    if openapi_schema_cache is None:  # Ensure a dict is always returned
        openapi_schema_cache = {}
    return openapi_schema_cache


def create_app() -> FastAPI:
    """Creates and configures the FastAPI application.

    Returns:
        FastAPI: The configured FastAPI application instance.
    """
    # Initialize FastAPI with versioned title
    app = FastAPI(
        title=f"Presidio Analyzer API {settings.API_VERSION}",
        description="FastAPI service for PII detection using Microsoft Presidio",
        version=settings.API_VERSION,
        docs_url=f"/api/{settings.API_VERSION}/docs",
        redoc_url=f"/api/{settings.API_VERSION}/redoc",
        openapi_url=f"/api/{settings.API_VERSION}/openapi.json",
        lifespan=lifespan,
    )

    # Setup OpenTelemetry early, before other middleware
    logger.info("Setting up telemetry...")
    setup_telemetry(app)

    # Setup Prometheus metrics
    logger.info("Setting up Prometheus metrics...")
    setup_prometheus(app)

    # Initialize metrics middleware for JSON metrics endpoint (legacy)
    metrics_middleware = MetricsMiddleware(app)
    app.state.metrics = metrics_middleware

    # Add security middleware
    app.add_middleware(SecurityHeadersMiddleware)
    app.add_middleware(RateLimiterMiddleware)

    # Include API routes with the correct prefix
    app.include_router(
        router,
        prefix=f"/api/{settings.API_VERSION}",
    )

    # Legacy JSON metrics endpoint
    @app.get(f"/api/{settings.API_VERSION}/metrics-json", tags=["Monitoring"])
    async def get_metrics():
        return JSONResponse(content=app.state.metrics.get_metrics())

    return app


app = create_app()

if __name__ == "__main__":
    # This block is for development purposes only
    # For proper execution, use the run.py script in the project root
    import uvicorn

    uvicorn.run(
        app,
        host=settings.SERVER_HOST,
        port=settings.SERVER_PORT,
        log_level=settings.LOG_LEVEL.lower(),
        reload=True,
    )
