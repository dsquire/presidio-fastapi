[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "presidio_fastapi"
version = "0.1.0"
description = "A FastAPI service for detecting PII using Microsoft Presidio"
readme = "README.md"
requires-python = "==3.12.*"
license = { file = "LICENSE" }
authors = [
    { name = "Danny Squire", email = "danny@el-fuego.net" }
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Framework :: FastAPI",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.12",
    "Topic :: Security :: Privacy",
]
dependencies = [
    "fastapi[all]>=0.115.12",
    "presidio-analyzer>=2.2.358",
    "python-dotenv>=1.0.0",
    "pydantic-settings>=2.0.0",
    "uvicorn[standard]>=0.24.0",
    "starlette>=0.27.0",
    "opentelemetry-api>=1.22.0",
    "opentelemetry-sdk>=1.22.0",
    "opentelemetry-instrumentation-fastapi>=0.43b0",
    "opentelemetry-exporter-otlp>=1.22.0",
    "prometheus-client>=0.17.1",
    "pyyaml>=6.0.1",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",  # Added pytest-cov
    "black>=23.7.0",
    "isort>=5.12.0",
    "mypy>=1.5.0",
    "ruff>=0.0.284",
    "pydantic>=2.0.0", # Removed [mypy] extra
    "types-PyYAML>=6.0.12",  # Type stubs for PyYAML
]

[tool.ruff.lint]
select = ["E", "F", "B", "I"]
ignore = []

[tool.ruff]
line-length = 100

[tool.mypy]
python_version = "3.12"
strict = true # Enable all optional error checking flags for thorough type safety.

# Customize strict flags:
# 'strict = true' normally enables 'disallow_untyped_decorators = true'.
# We explicitly set it to false here to allow decorators without type annotations if that's intended.
disallow_untyped_decorators = false

# Import handling:
ignore_missing_imports = true # Suppress errors for imports that don't have type stubs.

# Plugins for enhanced type checking with specific libraries:
plugins = [
  "pydantic.mypy" # Essential for validating Pydantic models.
]

# Error reporting preferences:
show_error_codes = true # Display [error-code] in messages for easier reference.

# Files and directories to exclude from type checking (paths are regex against absolute paths):
exclude = [
    "^presidio_fastapi\\.egg-info/", # Build artifacts for the current project (at project root).
    "^\\.venv/",                   # Python virtual environments (typically at project root).
    "/__pycache__/",              # Python bytecode cache folders (anywhere in path).
    "^build/",                    # General build output folder (at project root).
    "^dist/",                     # General distribution folder (at project root).
]

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_paths = ["."]  # Added python_paths
asyncio_default_fixture_loop_scope = "function"  # Set explicit scope for async fixtures

[tool.setuptools]
packages = [
    "presidio_fastapi", 
    "presidio_fastapi.app",
    "presidio_fastapi.app.api",
    "presidio_fastapi.app.models",
    "presidio_fastapi.app.services"
]

[project.scripts]
presidio-fastapi = "presidio_fastapi.run:main"
